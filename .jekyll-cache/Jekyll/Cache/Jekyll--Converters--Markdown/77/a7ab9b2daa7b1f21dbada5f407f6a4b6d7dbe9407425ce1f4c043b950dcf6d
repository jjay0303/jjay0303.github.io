I"	<h2 id="interceptor에-대해-알아보자">Interceptor에 대해 알아보자</h2>

<h3 id="1-interceptor란">1. Interceptor란?</h3>
<ul>
  <li>사용자의 요청을 받은 Controller가 핸들러를 호출하기 전/후에 낚아채서 추가작업을 한 뒤 핸들러로 보낼 수 있도록 해주는 것.</li>
  <li>핸들러마다 세션 체크를 한다면 서버의 부하가 늘어나고 메모리가 낭비되지만 인터셉터 클래스에 한번만 작성한 뒤 인터셉터가 필요한 url을 servlet-context.xml에 설정하면 스프링에서 일괄적으로 해당 url의 핸들러에 인터셉터를 적용해주므로 관리가 더 용이함.</li>
</ul>

<h3 id="2-interceptor-동작-위치-및-순서">2. Interceptor 동작 위치 및 순서</h3>
<ol>
  <li>사용자가 요청을 보냄</li>
  <li>Dispatcher Servlet이 해당 Request를 받아 핸들러 매핑으로 해당 핸들러를 찾음</li>
  <li>핸들러 실행체인(HandlerExectuonChanin)이 등록된 인터셉터를 거친 뒤 controller를 실행함</li>
</ol>

<h3 id="3-메서드">3. 메서드</h3>
<ul>
  <li>스프링이 제공하는 <code class="language-plaintext highlighter-rouge">HandlerInterceptor</code> 인터페이스와 <code class="language-plaintext highlighter-rouge">HandlerInterceptorAdapter</code> 추상클래스에 정의되어있는 메서드는 preHandle(), postHandle(), afterCompletion()이 있다.</li>
</ul>

<ol>
  <li>preHandle()
    <ul>
      <li>컨트롤러 호출 전 실행되며 controller로 가기 전 처리할 작업이 있거나 사용자의 request를 가공 또는 추가해야할 경우 사용</li>
      <li><code class="language-plaintext highlighter-rouge">boolean</code>값을 리턴하여 값이 true인 경우 preHandle()실행 후 핸들러에 접근 / false인 경우 작업 중단</li>
    </ul>
  </li>
  <li>postHandle()
    <ul>
      <li>핸들러 실행 후 View로 가기 전 호출</li>
      <li>ModelAndView 타입 정보가 인자값으로 받으므로 Model객체의 정보를 참조하거나 조작 가능</li>
      <li>인터셉터가 여러개인 경우 역순 호출</li>
      <li>비동기적 요청처리에는 처리 X</li>
    </ul>
  </li>
  <li>afterCompletion()
    <ul>
      <li>모든 작업이 완료된 후 실행되므로 요청 처리중에 사용한 리소스를 반환하기 적당한 메서드</li>
    </ul>
  </li>
</ol>

<h3 id="4-스프링에서-구현">4. 스프링에서 구현</h3>
<ol>
  <li>HandlerInterceptor 혹인 HandlerInterceptorAdater를 상속받아 클래스를 생성</li>
</ol>

<ul>
  <li>
    <p>회원만 이용 가능한 서비스에 대한 요청을 인터셉터</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kn">package</span> <span class="nn">com.spring.common.interceptor</span><span class="o">;</span>

  <span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
  <span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
  <span class="kn">import</span> <span class="nn">javax.servlet.http.HttpSession</span><span class="o">;</span>

  <span class="kn">import</span> <span class="nn">org.springframework.web.servlet.handler.HandlerInterceptorAdapter</span><span class="o">;</span>

  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">LoginInterceptor</span> <span class="kd">extends</span> <span class="nc">HandlerInterceptorAdapter</span><span class="o">{</span>
          
      <span class="nd">@Override</span>
      <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">preHandle</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span><span class="o">{</span>
              
          <span class="nc">HttpSession</span> <span class="n">session</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getSession</span><span class="o">();</span>
              
          <span class="k">if</span><span class="o">(</span><span class="n">session</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">"loginUser"</span><span class="o">)</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span> 
              <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
          <span class="o">}</span><span class="k">else</span> <span class="o">{</span> 
              <span class="n">session</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">"alertMsg"</span><span class="o">,</span> <span class="s">"로그인 후 이용바랍니다."</span><span class="o">);</span>
              <span class="n">response</span><span class="o">.</span><span class="na">sendRedirect</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">getContextPath</span><span class="o">());</span>
              <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
          <span class="o">}</span>
              
      <span class="o">}</span>

  <span class="o">}</span>
</code></pre></div>    </div>
    <p><br />
        2. 해당 인터셉터를 거쳐갈 url을 servlet-context.xml에 등록</p>
  </li>
</ul>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nt">&lt;interceptors&gt;</span>
		<span class="nt">&lt;interceptor&gt;</span>
			<span class="nt">&lt;mapping</span> <span class="na">path=</span><span class="s">"/myPage.me"</span> <span class="nt">/&gt;</span>
			<span class="nt">&lt;mapping</span> <span class="na">path=</span><span class="s">"/update.me"</span> <span class="nt">/&gt;</span>
			<span class="nt">&lt;mapping</span> <span class="na">path=</span><span class="s">"/enrollForm.bo"</span> <span class="nt">/&gt;</span>
			<span class="nt">&lt;beans:bean</span> <span class="na">class=</span><span class="s">"com.spring.common.interceptor.LoginInterceptor"</span> <span class="na">id=</span><span class="s">"LoginInterceptor"</span> <span class="nt">/&gt;</span>
		<span class="nt">&lt;/interceptor&gt;</span>
	<span class="nt">&lt;/interceptors&gt;</span>
    
</code></pre></div></div>

<h4 id="참고">참고</h4>
<ul>
  <li>수업자료</li>
  <li><a href="https://popo015.tistory.com/115">[Spring] 스프링 인터셉터(Interceptor)란?</a></li>
</ul>
:ET