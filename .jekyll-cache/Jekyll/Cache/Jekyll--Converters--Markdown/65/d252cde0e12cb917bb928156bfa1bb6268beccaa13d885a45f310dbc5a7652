I"<h2 id="기술면접준비를-합시다--db편">기술면접준비를 합시다- DB편</h2>

<h3 id="1-database란">1. Database란?</h3>
<ul>
  <li>다수의 응용시스템 혹은 다수의 사용자들이 공용으로 사용하기 위해 통합하여  저장된 운영데이터의 집합</li>
  <li>DB 설계시 가장 중요한 것
 👉 무결성의 보장</li>
</ul>

<h3 id="2-dbms">2. DBMS</h3>
<ul>
  <li>
    <p>DB내의 데이터에 접근하여 데이터 추출, 정의, 조작, 제어 등을 할 수 있게 해주는 데이터베이스 전용 관리 프로그램</p>
  </li>
  <li>
    <p>RDBMS : Relational database management system. 관계형 모델 기반 DB시스템</p>
  </li>
</ul>

<h3 id="3-sql--nosql">3. SQL / NoSQL</h3>
<ul>
  <li>Spring은 MySQL(SQL), Node.js는 MongoDB(NoSQL)… 무슨 차이일까?</li>
</ul>

<ol>
  <li>SQL(관계형 DB)
    <ul>
      <li>관계형 DB의 특징</li>
    </ul>
    <ul>
      <li>1) 데이터는 정해진 스키마에 따라 저장<br />
 👉 스키마를 준수하지 않은 레코드는 테이블에 추가할 수 없음(유연성 떨어짐)
 👉 스키마 수정이 힘들다</li>
      <li>2) 데이터는 관계를 통해 여러 테이블에 분산됨<br />
 👉 데이터의 중복 최소화로 무결성 보장
 👉 쿼리문이 복잡하고 수직적 확장(서버 성능 향상)만 가능</li>
    </ul>
  </li>
  <li>NoSQL(비관계형 DB)
    <ul>
      <li>스키마가 없음<br />
  👉 문서(SQL의 레코드)를 같은 컬렉션에 추가 가능(JSON과 비슷)<br />
  👉 데이터 수정 시 모든 컬렉션에서 수정</li>
      <li>JOIN이 없음<br />
  👉 변경이 잦지 않은 데이터 취급에 유리(속도가 빠름)
  👉 수평적 확장을 함(애플리케이션이 발생시키는 모든 읽기/쓰기 등 요청 처리가 가능)
  👉 데이터 중복에 대해 지속적인 업데이트 필요</li>
    </ul>
  </li>
</ol>

<h3 id="4-오라클과-mysql-차이">4. 오라클과 MySQL 차이</h3>

<table>
  <thead>
    <tr>
      <th style="text-align: center">오라클</th>
      <th style="text-align: center">MySQL</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">대용량 DB</td>
      <td style="text-align: center">소용량 DB</td>
    </tr>
    <tr>
      <td style="text-align: center">대규모 트랜잭션 처리</td>
      <td style="text-align: center">단일 DB로 제한</td>
    </tr>
    <tr>
      <td style="text-align: center">독립실행, 트리거 등을 지원</td>
      <td style="text-align: center">DB복원을 위한 저장점이 없음(commit, rollback만</td>
    </tr>
    <tr>
      <td style="text-align: center">존재)</td>
      <td style="text-align: center"> </td>
    </tr>
  </tbody>
</table>

<h3 id="5-ddldmldcl">5. DDL/DML/DCL</h3>

<table>
  <thead>
    <tr>
      <th style="text-align: center">언어|</th>
      <th style="text-align: center">설명</th>
      <th style="text-align: center"> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">DDL</td>
      <td style="text-align: center">정의어</td>
      <td style="text-align: center">DB의 구조를 정의,수정,삭제(create, alter, drop)</td>
    </tr>
    <tr>
      <td style="text-align: center">DML</td>
      <td style="text-align: center">조작어</td>
      <td style="text-align: center">DB내의 데이터 검색,삽입,갱신,삭제(select, delete, update, insert)</td>
    </tr>
    <tr>
      <td style="text-align: center">DCL</td>
      <td style="text-align: center">제어어</td>
      <td style="text-align: center">데이터의 무결성 유지,병행 수행 제어, 보호와 관리(commit, rollback, grant, revoke)</td>
    </tr>
  </tbody>
</table>

<h3 id="6-db정규화">6. DB정규화</h3>
<ul>
  <li>관계형 DB 설계에서 중복을 최소화하여 데이터를 구조화하는 프로세스</li>
  <li>목적 : 데이터 무결성 유지, 데이터 구조 일관성, 중복배제를 통한 DML 이상 현상 방지
 ❓이상현상 : 릴레이션의 일부 속성들이 종속으로 인해 insert, update, delete시 데이터 중복이 발생하는 것</li>
</ul>

<h3 id="7-무결성">7. 무결성</h3>
<ul>
  <li>무결성 :
    <ol>
      <li>개체 무결성 : 기본키는 NULL값이 올 수 없고, 중복될 수 없다.</li>
      <li>참조 무결성 : 외래키 값은 NULL이나 참조테이블의 기본키(Primary Key)값과 동일</li>
    </ol>
  </li>
</ul>

<h3 id="8-join">8. JOIN</h3>
<ul>
  <li>두개 이상의 테이블이나 DB를 연결하여 데이터를 검색하는 것</li>
  <li>적어도 하나의 칼럼을 공유해야 Join을 할 수 있으며 보통 기본키 또는 외래키로 연결</li>
</ul>

<table>
  <thead>
    <tr>
      <th style="text-align: center">종류|</th>
      <th style="text-align: center">설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">INNER JOIN</td>
      <td style="text-align: center">교집합</td>
    </tr>
    <tr>
      <td style="text-align: center">LEFT/RIGHT OUTER JOIN</td>
      <td style="text-align: center">기존테이블값 + 교집합</td>
    </tr>
    <tr>
      <td style="text-align: center">FULL OUTER JOIN</td>
      <td style="text-align: center">합집합</td>
    </tr>
    <tr>
      <td style="text-align: center">CROSS JOIN</td>
      <td style="text-align: center">모든 경우의 수가 나오는 조인(N*M)</td>
    </tr>
    <tr>
      <td style="text-align: center">SELF JOIN</td>
      <td style="text-align: center">하나의 테이블을 여러번 조인</td>
    </tr>
  </tbody>
</table>

<h3 id="9-서브쿼리inner-query">9. 서브쿼리(Inner Query)</h3>
<ul>
  <li>쿼리 안에 있는 쿼리로 select, from, where절등 안에 기술하며 order by절은 사용 x</li>
  <li>메인쿼리가 서브쿼리를 포함하는 종속관계</li>
  <li>단일행(결과 1행) / 다중행(결과 여러행) / 다중컬럼(결과 여러컬럼)</li>
</ul>

<h3 id="10-시퀸스">10. 시퀸스</h3>
<ul>
  <li>순차적으로 증가하는 컬럼을 자동으로 생성해주는 오라클 객체</li>
</ul>

<h3 id="11-view가상-테이블">11. VIEW(가상 테이블)</h3>
<ul>
  <li>하나 이상의 테이블에서 유도한 가상 테이블로 데이터 보안을 유지하면서 조회는 할 수 있도록 허용된 데이터를 제한적으로 보여줌.</li>
  <li>사용자가 view에 데이터를 요청하면 해당하는 데이터를 원본에서 가져와 출력</li>
  <li>특징
    <ul>
      <li>기본 테이블 삭제시 뷰도 제거</li>
      <li>뷰의 변경은 불가하여 삭제 후 다시 생성해야함</li>
      <li>컬럼에 기본키가 포함되있지 않으면 삽입, 갱신, 삭제 불가능</li>
    </ul>
  </li>
</ul>

<h3 id="12-트리거">12. 트리거</h3>

<h3 id="13-index">13. index</h3>

<h4 id="참고">참고</h4>
<ul>
  <li>수업자료</li>
  <li><a href="https://coding-restaurant.tistory.com/136">신입 개발자 면접 준비 (2) : 기술면접</a></li>
  <li><a href="https://gyoogle.dev/blog/computer-science/data-base/SQL%20&amp;%20NOSQL.html">Tech Interview</a></li>
</ul>
:ET