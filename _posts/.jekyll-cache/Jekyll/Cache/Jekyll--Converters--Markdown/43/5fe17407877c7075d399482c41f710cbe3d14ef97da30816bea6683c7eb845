I"w<h2 id="기술면접준비를-합시다--java편">기술면접준비를 합시다- Java편</h2>

<h3 id="1-객체지향-프로그래밍oop이란">1. 객체지향 프로그래밍(OOP)이란?</h3>
<ul>
  <li>프로그래밍에서 필요한 데이터를 추상화시켜 객체를 만들고, 그 객체간의 상호작용을 통해 로직을 구성하는 프로그래밍 방식</li>
</ul>

<ol>
  <li>장단점
    <ul>
      <li>장점</li>
    </ul>
    <ul>
      <li>코드 재사용 용이, 상속을 통해 확장도 가능</li>
      <li>유지보수 쉬움</li>
      <li>대형 프로젝트에 적합
       - 단점</li>
      <li>처리 속도가 절차지향 프로그래밍보다는 느림</li>
      <li>객체가 많으면 용량이 커짐</li>
      <li>설계가 다소 복잡
   <br /><br /></li>
    </ul>
  </li>
  <li>객체지향 5대 원칙(SOLID)
    <ul>
      <li>클래스와 인스턴스(객체)</li>
    </ul>
    <ul>
      <li>클래스 : 객체를 만들기 위해 추상화를 거쳐 속성과 행위를 변수와 메소드로 정의하여 묶어둔 것</li>
      <li>객체 : 클래스에서 정의한 내용을 토대로 실제 메모리에 할당되어 사용되는 데이터</li>
    </ul>
  </li>
</ol>

<ul>
  <li>
    <p>추상화 : 객체와 클래스를 설계하기 위해 공통의 속성이나 기능으로 묶는 것</p>
  </li>
  <li>캡슐화 : 같은 목적을 가진 객체들을 하나로 묶는 것. 클래스도 결국 캡슐화임.
    <ul>
      <li>접근제어자를 통한 정보 은닉 =&gt; 보안</li>
      <li>코드 재활용에 용이 
<br /><br /></li>
    </ul>
  </li>
  <li>
    <p>상속 : 부모클래스의 속성과 기능을 그대로 사용하거나 자식클래스에서 수정(재정의)하여 사용할 수 있는 특성</p>
  </li>
  <li>다형성 : 어떤 변수나 함수가 상황에 따라 다른 결과를 출력하는 것
    <ul>
      <li>오버로딩 : 같은 이름의 함수를 여러개 정의하고 매개변수를 다르게하여 다른 결과를 출력</li>
      <li>오버라이딩 : 부모클래스의 메서드와 같은 이름, 매개변수를 재정의</li>
    </ul>
  </li>
</ul>

<h3 id="jvm-구조와-자바의-실행방식">JVM 구조와 자바의 실행방식</h3>

<h3 id="원시타입과-참조타입의-차이">원시타입과 참조타입의 차이</h3>

<h3 id="인터페이스와-추상클래스의-차이">인터페이스와 추상클래스의 차이</h3>

<h3 id="접근제어자">접근제어자</h3>

<h3 id="동일성identity과-동등성equality">동일성(identity)과 동등성(equality)</h3>

<h3 id="string-stringbuilder-stringbuffer의-차이">String, StringBuilder, StringBuffer의 차이</h3>

<h3 id="직렬화와-역직렬화">직렬화와 역직렬화</h3>

<h3 id="결합">결합</h3>

<h3 id="제네릭">제네릭</h3>

<h3 id="어노테이션">어노테이션</h3>

<h4 id="참고">참고</h4>
<ul>
  <li>수업자료</li>
  <li><a href="https://coding-restaurant.tistory.com/136">신입 개발자 면접 준비 (2) : 기술면접</a></li>
  <li><a href="https://gyoogle.dev/blog/computer-science/data-base/SQL%20&amp;%20NOSQL.html">Tech Interview</a></li>
</ul>
:ET